{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","todoUser","usersFromServer","find","classNames","TodoList","todos","map","App","useState","todosFromServer","setTodos","newTitle","setNewTitle","selectUserId","setSelectUserId","titleError","setTitleError","selectUserError","setSelectUserError","action","method","onSubmit","event","preventDefault","trim","newTodo","Math","max","prevTodos","htmlFor","placeholder","type","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"8MAAe,GACb,CACEA,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2BC3DI,GACb,CACEH,GAAI,EACJI,MAAO,qBACPC,WAAW,EACXC,OAAQ,GAEV,CACEN,GAAI,GACJI,MAAO,kBACPC,WAAW,EACXC,OAAQ,GAEV,CACEN,GAAI,EACJI,MAAO,qCACPC,WAAW,EACXC,OAAQ,I,uBCVCC,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC1C,OACE,mBAAGC,UAAU,WAAWC,KAAI,iBAAYF,EAAKL,OAA7C,SACGK,EAAKP,QCACU,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAExCZ,EACEY,EADFZ,GAAII,EACFQ,EADER,MAAOC,EACTO,EADSP,UAAWC,EACpBM,EADoBN,OAGlBO,EAAWC,EAAgBC,MAAK,SAAAP,GAAI,OAAIA,EAAKR,KAAOM,MAAW,KAErE,OACE,0BACE,UAASN,EAETS,UAAWO,IACT,WACA,CAAE,sBAAuBX,IAL7B,UAQE,oBAAII,UAAU,kBAAd,SACGL,IAEFS,GAAa,cAAC,EAAD,CAAUL,KAAMK,MATzBb,ICZEiB,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1C,OACE,yBAAST,UAAU,WAAnB,SACGS,EAAMC,KAAI,SAACP,GAAD,OACT,cAAC,EAAD,CAAwBA,KAAMA,GAAfA,EAAKZ,UCLfoB,EAAM,WACjB,MAA0BC,mBAASC,GAAnC,mBAAOJ,EAAP,KAAcK,EAAd,KAEA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAwCJ,mBAAS,GAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAEA,EAAoCN,oBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAA8CR,oBAAS,GAAvD,mBAAOS,EAAP,KAAwBC,EAAxB,KAyCA,OACE,sBAAKtB,UAAU,MAAf,UACE,+CAEA,uBACEuB,OAAO,aACPC,OAAO,OACPC,SA/Be,SAACC,GAMpB,GALAA,EAAMC,iBAENP,GAAeL,EAASa,QACxBN,GAAoBL,GAEfF,EAASa,QAAWX,EAAzB,CAIA,IAEMY,EAAU,CACdtC,GAHYuC,KAAKC,IAAL,MAAAD,KAAI,YAAQrB,EAAMC,KAAI,SAAAP,GAAI,OAAIA,EAAKZ,QAAO,EAItDI,MAAOoB,EAASa,OAChBhC,WAAW,EACXC,OAAQoB,GAGVH,GAAS,SAACkB,GAAD,4BAAmBA,GAAnB,CAA8BH,OAvBvCb,EAAY,IACZE,EAAgB,KA+Bd,UAKE,sBAAKlB,UAAU,QAAf,UACE,uBAAOiC,QAAQ,QAAf,qBACA,uBACE1C,GAAG,QACH2C,YAAY,gBACZC,KAAK,OACL,UAAQ,aACRC,MAAOrB,EACPsB,SAxDU,SAACX,GACnBN,GAAeM,EAAMY,OAAOF,MAAMR,QAClCZ,EAAYU,EAAMY,OAAOF,UAwDlBjB,IAAeJ,GACb,sBAAMf,UAAU,QAAhB,qCAGL,sBAAKA,UAAU,QAAf,UACE,uBAAOiC,QAAQ,OAAf,oBACA,yBACE,UAAQ,aACR1C,GAAG,OACH8C,SA9DiB,SAACX,GAC1BJ,GAAmB,GACnBJ,GAAiBQ,EAAMY,OAAOF,QA6DtBA,MAAOnB,EAJT,UAME,wBAAQmB,MAAM,GAAd,2BACC/B,EAAgBK,KAAI,SAACX,GAAD,OACnB,wBAAsBqC,MAAOrC,EAAKR,GAAlC,SACGQ,EAAKP,MADKO,EAAKR,UAMrB8B,GACC,sBAAMrB,UAAU,QAAhB,qCAIJ,wBAAQmC,KAAK,SAAS,UAAQ,eAA9B,oBAIF,cAAC,EAAD,CAAU1B,MAAOA,QCpGvB8B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.ee0d191e.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ninterface Props {\n  user: User;\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { UserTodo } from '../../types/UserTodo';\nimport usersFromServer from '../../api/users';\n\ninterface Props {\n  todo: UserTodo;\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id, title, completed, userId,\n  } = todo;\n\n  const todoUser = usersFromServer.find(user => user.id === userId) || null;\n\n  return (\n    <article\n      data-id={id}\n      key={id}\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n      {todoUser && (<UserInfo user={todoUser} />)}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { UserTodo } from '../../types/UserTodo';\n\ninterface Props {\n  todos: UserTodo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\nimport React, { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\n\nexport const App = () => {\n  const [todos, setTodos] = useState(todosFromServer);\n\n  const [newTitle, setNewTitle] = useState('');\n  const [selectUserId, setSelectUserId] = useState(0);\n\n  const [titleError, setTitleError] = useState(false);\n  const [selectUserError, setSelectUserError] = useState(false);\n\n  const handleTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitleError(!event.target.value.trim());\n    setNewTitle(event.target.value);\n  };\n\n  const handleSelectUserId = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectUserError(false);\n    setSelectUserId(+event.target.value);\n  };\n\n  const reset = () => {\n    setNewTitle('');\n    setSelectUserId(0);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setTitleError(!newTitle.trim());\n    setSelectUserError(!selectUserId);\n\n    if (!newTitle.trim() || !selectUserId) {\n      return;\n    }\n\n    const newId = Math.max(...todos.map(todo => todo.id)) + 1;\n\n    const newTodo = {\n      id: newId,\n      title: newTitle.trim(),\n      completed: false,\n      userId: selectUserId,\n    };\n\n    setTodos((prevTodos) => [...prevTodos, newTodo]);\n\n    reset();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            id=\"title\"\n            placeholder=\"Enter a title\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={newTitle}\n            onChange={handleTitle}\n          />\n          {titleError && !newTitle\n          && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"user\"\n            onChange={handleSelectUserId}\n            value={selectUserId}\n          >\n            <option value=\"\">Choose a user</option>\n            {usersFromServer.map((user) => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {selectUserError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}